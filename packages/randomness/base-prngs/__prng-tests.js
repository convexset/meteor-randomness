/* global Randomness: true */

// Test Snippet
// -------------

// Randomness.__useAleaPRNG();
// Randomness.__useNonsensePRNG();

var chiSquaredFractiles = {
	0.1: [undefined, 0.0158, 0.2107, 0.5844, 1.0636, 1.6103, 2.2041, 2.8331, 3.4895, 4.1682, 4.8652, 5.5778, 6.3038, 7.0415, 7.7895, 8.5468, 9.3122, 10.0852, 10.8649, 11.6509, 12.4426, 13.2396, 14.0415, 14.848, 15.6587, 16.4734, 17.2919, 18.1139, 18.9392, 19.7677, 20.5992, 21.4336, 22.2706, 23.1102, 23.9523, 24.7967, 25.6433, 26.4921, 27.343, 28.1958, 29.0505, 29.9071, 30.7654, 31.6255, 32.4871, 33.3504, 34.2152, 35.0814, 35.9491, 36.8182, 37.6886, 38.5604, 39.4334, 40.3076, 41.183, 42.0596, 42.9373, 43.8161, 44.696, 45.577, 46.4589, 47.3418, 48.2257, 49.1105, 49.9963, 50.8829, 51.7705, 52.6588, 53.5481, 54.4381, 55.3289, 56.2206, 57.1129, 58.0061, 58.9, 59.7946, 60.6899, 61.5858, 62.4825, 63.3799, 64.2778, 65.1765, 66.0757, 66.9756, 67.8761, 68.7772, 69.6788, 70.581, 71.4838, 72.3872, 73.2911, 74.1955, 75.1005, 76.006, 76.9119, 77.8184, 78.7254, 79.6329, 80.5408, 81.4493, 82.3581],
	0.2: [undefined, 0.0642, 0.4463, 1.0052, 1.6488, 2.3425, 3.0701, 3.8223, 4.5936, 5.3801, 6.1791, 6.9887, 7.8073, 8.6339, 9.4673, 10.307, 11.1521, 12.0023, 12.857, 13.7158, 14.5784, 15.4446, 16.314, 17.1865, 18.0618, 18.9398, 19.8202, 20.703, 21.588, 22.4751, 23.3641, 24.2551, 25.1478, 26.0422, 26.9383, 27.8359, 28.735, 29.6355, 30.5373, 31.4405, 32.345, 33.2506, 34.1574, 35.0653, 35.9743, 36.8844, 37.7955, 38.7075, 39.6205, 40.5344, 41.4492, 42.3649, 43.2814, 44.1987, 45.1167, 46.0356, 46.9552, 47.8755, 48.7965, 49.7182, 50.6406, 51.5636, 52.4873, 53.4116, 54.3365, 55.262, 56.188, 57.1147, 58.0418, 58.9696, 59.8978, 60.8266, 61.7558, 62.6856, 63.6158, 64.5466, 65.4777, 66.4094, 67.3415, 68.274, 69.2069, 70.1403, 71.0741, 72.0083, 72.9429, 73.8779, 74.8132, 75.749, 76.6851, 77.6216, 78.5584, 79.4956, 80.4332, 81.3711, 82.3093, 83.2478, 84.1867, 85.1259, 86.0654, 87.0052, 87.9453],
	0.3: [undefined, 0.1485, 0.7133, 1.4237, 2.1947, 2.9999, 3.8276, 4.6713, 5.5274, 6.3933, 7.2672, 8.1479, 9.0343, 9.9257, 10.8215, 11.7212, 12.6243, 13.5307, 14.4399, 15.3517, 16.2659, 17.1823, 18.1007, 19.0211, 19.9432, 20.867, 21.7924, 22.7192, 23.6475, 24.577, 25.5078, 26.4397, 27.3728, 28.3069, 29.2421, 30.1782, 31.1152, 32.0532, 32.9919, 33.9315, 34.8719, 35.8131, 36.755, 37.6975, 38.6408, 39.5847, 40.5292, 41.4744, 42.4201, 43.3664, 44.3133, 45.2607, 46.2086, 47.1571, 48.106, 49.0554, 50.0053, 50.9556, 51.9063, 52.8575, 53.8091, 54.7611, 55.7135, 56.6663, 57.6195, 58.5731, 59.527, 60.4812, 61.4358, 62.3908, 63.346, 64.3016, 65.2575, 66.2137, 67.1702, 68.1271, 69.0842, 70.0415, 70.9992, 71.9571, 72.9153, 73.8738, 74.8325, 75.7915, 76.7507, 77.7102, 78.6699, 79.6299, 80.5901, 81.5505, 82.5111, 83.4719, 84.433, 85.3943, 86.3558, 87.3175, 88.2794, 89.2415, 90.2038, 91.1663, 92.1289],
	0.4: [undefined, 0.275, 1.0217, 1.8692, 2.7528, 3.6555, 4.5702, 5.4932, 6.4226, 7.357, 8.2955, 9.2373, 10.182, 11.1291, 12.0785, 13.0297, 13.9827, 14.9373, 15.8932, 16.8504, 17.8088, 18.7683, 19.7288, 20.6902, 21.6525, 22.6156, 23.5794, 24.544, 25.5093, 26.4751, 27.4416, 28.4087, 29.3763, 30.3444, 31.313, 32.2821, 33.2517, 34.2216, 35.192, 36.1628, 37.134, 38.1055, 39.0774, 40.0496, 41.0222, 41.995, 42.9682, 43.9417, 44.9154, 45.8895, 46.8638, 47.8383, 48.8132, 49.7882, 50.7635, 51.7391, 52.7148, 53.6908, 54.667, 55.6434, 56.62, 57.5968, 58.5738, 59.551, 60.5283, 61.5059, 62.4836, 63.4615, 64.4395, 65.4177, 66.3961, 67.3746, 68.3533, 69.3322, 70.3111, 71.2903, 72.2695, 73.2489, 74.2285, 75.2081, 76.1879, 77.1679, 78.1479, 79.1281, 80.1084, 81.0888, 82.0693, 83.05, 84.0307, 85.0116, 85.9925, 86.9736, 87.9548, 88.9361, 89.9175, 90.899, 91.8806, 92.8622, 93.844, 94.8259, 95.8078],
	0.5: [undefined, 0.4549, 1.3863, 2.366, 3.3567, 4.3515, 5.3481, 6.3458, 7.3441, 8.3428, 9.3418, 10.341, 11.3403, 12.3398, 13.3393, 14.3389, 15.3385, 16.3382, 17.3379, 18.3377, 19.3374, 20.3372, 21.337, 22.3369, 23.3367, 24.3366, 25.3365, 26.3363, 27.3362, 28.3361, 29.336, 30.3359, 31.3359, 32.3358, 33.3357, 34.3356, 35.3356, 36.3355, 37.3355, 38.3354, 39.3353, 40.3353, 41.3352, 42.3352, 43.3352, 44.3351, 45.3351, 46.335, 47.335, 48.335, 49.3349, 50.3349, 51.3349, 52.3348, 53.3348, 54.3348, 55.3348, 56.3347, 57.3347, 58.3347, 59.3347, 60.3346, 61.3346, 62.3346, 63.3346, 64.3346, 65.3345, 66.3345, 67.3345, 68.3345, 69.3345, 70.3345, 71.3344, 72.3344, 73.3344, 74.3344, 75.3344, 76.3344, 77.3344, 78.3343, 79.3343, 80.3343, 81.3343, 82.3343, 83.3343, 84.3343, 85.3343, 86.3342, 87.3342, 88.3342, 89.3342, 90.3342, 91.3342, 92.3342, 93.3342, 94.3342, 95.3342, 96.3342, 97.3341, 98.3341, 99.3341],
	0.6: [undefined, 0.7083, 1.8326, 2.9462, 4.0446, 5.1319, 6.2108, 7.2832, 8.3505, 9.4136, 10.4732, 11.5298, 12.5838, 13.6356, 14.6853, 15.7332, 16.7795, 17.8244, 18.8679, 19.9102, 20.9514, 21.9915, 23.0307, 24.0689, 25.1063, 26.143, 27.1789, 28.2141, 29.2486, 30.2825, 31.3159, 32.3486, 33.3809, 34.4126, 35.4438, 36.4746, 37.5049, 38.5348, 39.5643, 40.5935, 41.6222, 42.6506, 43.6786, 44.7063, 45.7336, 46.7607, 47.7874, 48.8139, 49.8401, 50.866, 51.8916, 52.917, 53.9421, 54.967, 55.9916, 57.016, 58.0402, 59.0642, 60.0879, 61.1115, 62.1348, 63.158, 64.181, 65.2037, 66.2263, 67.2488, 68.271, 69.2931, 70.315, 71.3368, 72.3583, 73.3798, 74.4011, 75.4222, 76.4432, 77.464, 78.4848, 79.5053, 80.5258, 81.5461, 82.5663, 83.5863, 84.6062, 85.626, 86.6457, 87.6653, 88.6847, 89.7041, 90.7233, 91.7424, 92.7614, 93.7803, 94.7991, 95.8178, 96.8364, 97.8549, 98.8733, 99.8916, 100.9098, 101.9279, 102.9459],
	0.7: [undefined, 1.0742, 2.4079, 3.6649, 4.8784, 6.0644, 7.2311, 8.3834, 9.5245, 10.6564, 11.7807, 12.8987, 14.0111, 15.1187, 16.2221, 17.3217, 18.4179, 19.511, 20.6014, 21.6891, 22.7745, 23.8578, 24.939, 26.0184, 27.096, 28.1719, 29.2463, 30.3193, 31.3909, 32.4612, 33.5302, 34.5981, 35.6649, 36.7307, 37.7954, 38.8591, 39.922, 40.9839, 42.0451, 43.1053, 44.1649, 45.2236, 46.2817, 47.339, 48.3957, 49.4517, 50.5071, 51.5619, 52.6161, 53.6697, 54.7228, 55.7753, 56.8274, 57.8789, 58.9299, 59.9805, 61.0305, 62.0802, 63.1294, 64.1782, 65.2265, 66.2745, 67.322, 68.3692, 69.416, 70.4624, 71.5085, 72.5542, 73.5995, 74.6446, 75.6893, 76.7337, 77.7777, 78.8215, 79.865, 80.9081, 81.951, 82.9936, 84.0359, 85.0779, 86.1197, 87.1612, 88.2025, 89.2435, 90.2842, 91.3247, 92.365, 93.405, 94.4448, 95.4844, 96.5238, 97.5629, 98.6018, 99.6405, 100.679, 101.7173, 102.7554, 103.7933, 104.831, 105.8685, 106.9058],
	0.8: [undefined, 1.6424, 3.2189, 4.6416, 5.9886, 7.2893, 8.5581, 9.8032, 11.0301, 12.2421, 13.442, 14.6314, 15.812, 16.9848, 18.1508, 19.3107, 20.4651, 21.6146, 22.7595, 23.9004, 25.0375, 26.1711, 27.3015, 28.4288, 29.5533, 30.6752, 31.7946, 32.9117, 34.0266, 35.1394, 36.2502, 37.3591, 38.4663, 39.5718, 40.6756, 41.778, 42.8788, 43.9782, 45.0763, 46.173, 47.2685, 48.3628, 49.456, 50.548, 51.6389, 52.7288, 53.8177, 54.9056, 55.9926, 57.0786, 58.1638, 59.2481, 60.3316, 61.4142, 62.4961, 63.5772, 64.6576, 65.7373, 66.8162, 67.8945, 68.9721, 70.049, 71.1253, 72.201, 73.2761, 74.3506, 75.4245, 76.4978, 77.5707, 78.6429, 79.7146, 80.7859, 81.8566, 82.9268, 83.9965, 85.0658, 86.1346, 87.203, 88.2709, 89.3383, 90.4053, 91.472, 92.5382, 93.6039, 94.6693, 95.7343, 96.799, 97.8632, 98.9271, 99.9906, 101.0537, 102.1165, 103.179, 104.2411, 105.3028, 106.3643, 107.4254, 108.4862, 109.5467, 110.6068, 111.6667],
	0.9: [undefined, 2.7055, 4.6052, 6.2514, 7.7794, 9.2364, 10.6446, 12.017, 13.3616, 14.6837, 15.9872, 17.275, 18.5493, 19.8119, 21.0641, 22.3071, 23.5418, 24.769, 25.9894, 27.2036, 28.412, 29.6151, 30.8133, 32.0069, 33.1962, 34.3816, 35.5632, 36.7412, 37.9159, 39.0875, 40.256, 41.4217, 42.5847, 43.7452, 44.9032, 46.0588, 47.2122, 48.3634, 49.5126, 50.6598, 51.8051, 52.9485, 54.0902, 55.2302, 56.3685, 57.5053, 58.6405, 59.7743, 60.9066, 62.0375, 63.1671, 64.2954, 65.4224, 66.5482, 67.6728, 68.7962, 69.9185, 71.0397, 72.1598, 73.2789, 74.397, 75.5141, 76.6302, 77.7454, 78.8596, 79.973, 81.0855, 82.1971, 83.3079, 84.4179, 85.527, 86.6354, 87.743, 88.8499, 89.956, 91.0615, 92.1662, 93.2702, 94.3735, 95.4762, 96.5782, 97.6796, 98.7803, 99.8805, 100.98, 102.0789, 103.1773, 104.275, 105.3722, 106.4689, 107.565, 108.6606, 109.7556, 110.8502, 111.9442, 113.0377, 114.1307, 115.2232, 116.3153, 117.4069, 118.498],
};

var M = 100000;
var metrics = {};
var startTime = (new Date()).getTime();

[10, 20, 50, 100, 200].reverse().forEach(function(n, n_idx) {
	console.log('-----------[' + n + ']-----------');
	var counts_js = _.range(n).map(() => 0);
	for (var i = 0; i < M; i++) {
		counts_js[Math.floor(Math.random() * n)] += 1;
	}
	var dev_js = counts_js.map(c => Math.abs(c - (M/n)) / (M/n) );
	var js_top_5_dev = dev_js.sort().reverse().splice(0, 5);
	console.log('[Math.random] Top 5 Deviations:', js_top_5_dev.map(x => (Math.round(x * 100 * 100)/100) + '%' ));
	var chiSq = counts_js.map(c => (c - (M/n)) * (c - (M/n)) / (M/n) ).reduce((x,y) => x + y);
	var dof = n - 1 - (0 + 1);

	Object.keys(chiSquaredFractiles).forEach(function(fracLevel) {
		var fractileValues = chiSquaredFractiles[fracLevel][dof];
		console.log('\tFractile ' + fracLevel + ': ' + (chiSq > fractileValues ? 'EXCEEDS' : 'within') );
	});
	
	_.range(5).map(x => x + 100 * n_idx).forEach(
		function(seed, idx) {
			var rng, _rng, name;
			if (idx === 0) {
				rng = Randomness.makePRNGBeta(1, 1, seed);
				name = 'nb=' + n + '_seed=' + seed + '_beta(1,1)';
			} else if (idx === 1) {
				_rng = Randomness.makePRNGDirichlet([1, 1], seed);
				rng = () => (_rng()[0]);
				name = 'nb=' + n + '_seed=' + seed + '_Dir(1,1)';
			} else {
				rng = Randomness.makePRNGUniform(seed);
				name = 'nb=' + n + '_seed=' + seed + '_U';
			}
			var counts = _.range(n).map(() => 0);

			for (var i = 0; i < M; i++) {
				counts[Math.floor(rng() * n)] += 1;
			}

			var dev = counts.map(c => Math.abs(c - (M/n)) / (M/n) );
			console.log('[' + name + '] Deviation:', dev.map(x => (Math.round(x * 100 * 100)/100) + '%').join(' '));
			var my_top_5_dev = dev.sort().reverse().splice(0, 5);
			console.log('[' + name + '] Top 5 Deviations:', my_top_5_dev.map(x => (Math.round(x * 100 * 100)/100) + '%' ));
			console.log('[' + name + '] % diff v.s. JS (top 5):', my_top_5_dev.map((x, idx) => Math.floor((js_top_5_dev[idx] - x) * 10000) / 100));
			var thisMetric = dev.map((x, idx) => ((dev_js[idx] - x) * 100) * Math.exp(-4 * idx / n)).reduce((x,y) => x + y) / dev.map((x,idx) => Math.exp(-4 * idx / n)).reduce((x,y) => x + y);
			console.log('[' + name + '] % diff v.s. JS (wt. avg):',  thisMetric);

			metrics[name] = thisMetric;

			var chiSq = counts.map(c => (c - (M/n)) * (c - (M/n)) / (M/n) ).reduce((x,y) => x + y);
			var dof = n - 1 - (0 + 1);

			Object.keys(chiSquaredFractiles).forEach(function(fracLevel) {
				var fractileValues = chiSquaredFractiles[fracLevel][dof];
				console.log('\tFractile ' + fracLevel + ': ' + (chiSq > fractileValues ? 'EXCEEDS' : 'within') );
			});
		}
	);
	console.log('-------------------------');
});
var endTime = (new Date()).getTime();

console.log('Metrics (positive scores mean better than Math.random()):', metrics);
console.log('Time Spent:', (endTime - startTime) / 1000, 'sec');

function timeIt(n, fn) {
	var ts = (new Date()).getTime();
	for (var i = 0; i < n; i++) {
		fn();
	}
	var te = (new Date()).getTime();
	return (te - ts) / 1000;
}

console.log('Time (Math.random): ' + timeIt(1000000, Math.random));

Randomness.__useAleaPRNG();
console.log('Time (Alea|makePRNGUniform): ' + timeIt(1000000, Randomness.makePRNGUniform()));
console.log('Time (Alea|makePRNGBeta(1, 1)): ' + timeIt(1000000, Randomness.makePRNGBeta(1, 1)));
console.log('Time (Alea|makePRNGDirichlet([1, 1])): ' + timeIt(1000000, Randomness.makePRNGDirichlet([1, 1])));

Randomness.__useNonsensePRNG();
console.log('Time (Nonsense|makePRNGUniform): ' + timeIt(1000000, Randomness.makePRNGUniform()));
console.log('Time (Nonsense|makePRNGBeta(1, 1)): ' + timeIt(1000000, Randomness.makePRNGBeta(1, 1)));
console.log('Time (Nonsense|makePRNGDirichlet([1, 1])): ' + timeIt(1000000, Randomness.makePRNGDirichlet([1, 1])));

Randomness.__useAleaPRNG();

// Autocorrelation Tests
Randomness.__useAleaPRNG();
var rngU_Al = Randomness.makePRNGUniform();
Randomness.__useNonsensePRNG();
var rngU_BS = Randomness.makePRNGUniform();
Randomness.__useAleaPRNG();
var xxx_MR = _.range(200000).map(Math.random);
var xxx_Al = _.range(200000).map(rngU_Al);
var xxx_BS = _.range(200000).map(rngU_BS);
_.range(1,25+1).concat([50, 100, 250, 500, 1000, 2500, 5000, 10000, 25000, 50000, 100000]).forEach(function(q) {
	var yyy_MR = _.range(100000).map(idx => (xxx_MR[idx] - 0.5) * (xxx_MR[q + idx] - 0.5) / 12);
	var yyy_Al = _.range(100000).map(idx => (xxx_Al[idx] - 0.5) * (xxx_Al[q + idx] - 0.5) / 12);
	var yyy_BS = _.range(100000).map(idx => (xxx_BS[idx] - 0.5) * (xxx_BS[q + idx] - 0.5) / 12);
	var acorr_MR = Math.abs(yyy_MR.reduce((x,y) => x+y) / 100000);
	var acorr_Al = Math.abs(yyy_Al.reduce((x,y) => x+y) / 100000);
	var acorr_BS = Math.abs(yyy_BS.reduce((x,y) => x+y) / 100000);
	console.log('|acorr_MR(' + q + ')|   = ' + acorr_MR + ' = (' + (Math.round(10000 * acorr_MR / acorr_BS) / 100) + '%) |acorr_BS|');
	console.log('|acorr_Alea(' + q + ')| = ' + acorr_Al + ' = (' + (Math.round(10000 * acorr_Al / acorr_BS) / 100) + '%) |acorr_BS|');
	console.log('|acorr_BS(' + q + ')|   = ' + acorr_BS);
});

/*
https://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test

Upper-tail critical values of chi-square distribution

	Probability less than the critical value
DoF	0.90	0.95	0.975	0.99	0.999
1	2.706	3.841	5.024	6.635	10.828
2	4.605	5.991	7.378	9.210	13.816
3	6.251	7.815	9.348	11.345	16.266
4	7.779	9.488	11.143	13.277	18.467
5	9.236	11.070	12.833	15.086	20.515
6	10.645	12.592	14.449	16.812	22.458
7	12.017	14.067	16.013	18.475	24.322
8	13.362	15.507	17.535	20.090	26.125
9	14.684	16.919	19.023	21.666	27.877
10	15.987	18.307	20.483	23.209	29.588
*/